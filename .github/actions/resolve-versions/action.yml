name: 'Resolve the versions.'
author: 'Ryo Takeuchi'
description: 'Resolve current and new versions.'

inputs:
  github-token:
    description: 'The GitHub token used to create an authenticated client'
    required: false
    default: ${{ github.token }}
  manifest-file:
    description: 'where can the manifest file be found in the project?'
    required: false
    default: ''
outputs:
  current-version:
    description: 'Current version'
    value: ${{ steps.current-version.outputs.result }}
  new-version:
    description: 'New version'
    value: ${{ steps.new-version.outputs.result }}

runs:
  using: composite
  steps:
    # https://github.com/marketplace/actions/github-script
    - name: Resolve the current version from the manifest file.
      id: current-version
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        github-token: ${{ inputs.github-token }}
        result-encoding: string
        script: |
          const manifestFilePath = core.getInput('manifest-file') || '.github/release-please-manifest.json';

          const fs = require('fs');
          if (!fs.existsSync(manifestFilePath)) {
            throw new Error(`File not found: ${manifestFilePath}`);
          }

          const content = fs.readFileSync(manifestFilePath, 'utf8');
          const manifest = JSON.parse(content);
          const currentVersion = manifest["."];

          console.log(`currentVersion: ${currentVersion}`)
          return currentVersion;

    # https://github.com/marketplace/actions/github-script
    - name: Get current version and create new version
      id: new-version
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        CURRENT_VERSION: ${{ steps.current-version.outputs.result }}
      with:
        github-token: ${{ inputs.github-token }}
        result-encoding: string
        script: |
          const currentDate = new Date();
          const currentYear = currentDate.getFullYear();
          const currentMonth = currentDate.getMonth() + 1;

          const currentVersion = process.env.CURRENT_VERSION;
          const [year, month, build] = currentVersion.split('.').map(Number);
          let newVersion;
          if (year !== currentYear || month !== currentMonth) {
            newVersion = `${currentYear}.${currentMonth}.0`;
          } else {
            newVersion = `${year}.${month}.${build + 1}`;
          }

          console.log(`newVersion: ${newVersion}`)
          return newVersion;
